{"version":3,"sources":["Data/localstorage/localStorage.ts","Data/http/http.ts","Data/urlBuilder/urlBuilder.ts","Domain/redux/posts.ts","Domain/redux/store.ts","Presentation/Components/Button/index.tsx","Presentation/Components/TextArea/index.tsx","Presentation/Components/Input/index.tsx","Presentation/Containers/PostCreator/index.tsx","Presentation/Containers/Post/index.tsx","Presentation/Pages/Home/index.tsx","styles/global.ts","App.tsx","index.tsx"],"names":["localStorage","this","key","value","setItem","post","getItem","removeItem","url","a","axios","get","then","response","data","ACTIONS","getPostsFromLocalStorage","posts","Object","entries","map","id","JSON","parse","postsReducer","state","action","type","remotePosts","payload","localPosts","middleware","thunk","store","createStore","combinedReducers","composeWithDevTools","applyMiddleware","Button","text","onClick","Container","styled","button","TextArea","props","onChange","placeholder","name","defaultValue","textarea","Input","input","PostCreator","dispatch","useDispatch","useState","title","setState","updateState","e","target","alert","uuid","LocalStorage","stringify","div","Post","isEditable","setIsEditable","isRemote","Menu","memo","Home","showLocalPosts","setShowLocalPosts","memoizedLocalPosts","useCallback","memoizedRemotPosts","Http","UrlBuilder","getPosts","status","articles","publishedAt","description","useSelector","useEffect","Nav","GlobalStyle","createGlobalStyle","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.6f95a9f2.chunk.js","sourcesContent":["import ILocalStorage from './localStorage.interface'\n\nclass LocalStorage implements ILocalStorage {\n  localStorage\n\n  constructor() {\n    this.localStorage = localStorage\n  }\n\n  setItem(key: string, value: string): void {\n    return this.localStorage.setItem(key, value)\n  }\n\n  getItem(key: string): string {\n    const post = this.localStorage.getItem(key)\n    return post ?? 'Post Not Found.'\n  }\n\n  removeItem(key: string): void {\n    return this.localStorage.removeItem(key)\n  }\n\n  editItem(key: string, value: string): string {\n    const post = this.getItem(key)\n\n    if (!post) return 'Post not found.'\n\n    this.setItem(key, value)\n\n    return 'Post saved successfully.'\n  }\n}\n\nexport default new LocalStorage()\n","import axios from 'axios'\nimport { HttpInterface } from './http.interface'\n\nclass Http implements HttpInterface {\n  async get<T>(url: string): Promise<T> {\n    return await axios.get(url).then((response) => response.data)\n  }\n}\n\nexport default new Http()\n","import IUrlBuilder from './urlBuilder.interface'\n\nclass UrlBuilder implements IUrlBuilder {\n  getPosts(): string {\n    const url =\n      'https://newsapi.org/v2/everything?q=watches&sortBy=popularity&apiKey=d2fc94872d8d49a2a31dc8c7f6266d7f'\n    return url\n  }\n}\n\nexport default new UrlBuilder()\n","import { LocalStorage } from '../../Data/localstorage'\nimport { Http } from '../../Data/http'\nimport { UrlBuilder } from '../../Data/urlBuilder'\n\ninterface Action {\n  type: string\n  payload: any\n}\n\ninterface Value {\n  title: string\n  text: string\n}\n\nexport const ACTIONS = {\n  GET_LOCAL_POSTS: 'GET_LOCAL_POSTS',\n  GET_REMOTE_POSTS: 'GET_REMOTE_POSTS',\n  CREATE_POST: 'CREATE_POST',\n  EDIT_POST: 'EDIT_POST',\n  REMOVE_POST: 'REMOVE_POST'\n}\n\nexport const getRemotePosts = () => async (dispatch: any) => {\n  const posts: any = await Http.get(UrlBuilder.getPosts())\n  if (posts.status !== 'ok') return\n  const payload = posts.articles.map((post: any) => {\n    return {\n      id: post.publishedAt,\n      value: {\n        title: post.title,\n        text: post.description\n      }\n    }\n  })\n  return dispatch({\n    type: ACTIONS.GET_REMOTE_POSTS,\n    payload: payload\n  })\n}\n\nexport const getPostsFromLocalStorage = (): Array<{\n  id: string\n  value: Value\n}> => {\n  const posts = localStorage\n  const arrayOfPosts = Object.entries(posts).map((post) => ({\n    id: post[0],\n    value: JSON.parse(post[1])\n  }))\n\n  return arrayOfPosts\n}\n\nexport const getLocalPosts = () => (dispatch: any) => {\n  const posts = getPostsFromLocalStorage()\n\n  return dispatch({\n    type: ACTIONS.GET_LOCAL_POSTS,\n    payload: posts\n  })\n}\n\nexport const createPost = (id: string, value: Value) => (\n  dispatch: any\n): Action => {\n  LocalStorage.setItem(id, JSON.stringify(value))\n  const posts = getPostsFromLocalStorage()\n\n  return dispatch({\n    type: ACTIONS.CREATE_POST,\n    payload: posts\n  })\n}\n\nexport const removePost = (id: string) => (dispatch: any) => {\n  LocalStorage.removeItem(id)\n  const posts = getPostsFromLocalStorage()\n\n  return dispatch({\n    type: ACTIONS.REMOVE_POST,\n    payload: posts\n  })\n}\n\nexport const editPost = (id: string, value: Value) => (dispatch: any) => {\n  LocalStorage.setItem(id, JSON.stringify(value))\n  const posts = getPostsFromLocalStorage()\n\n  return dispatch({\n    type: ACTIONS.EDIT_POST,\n    payload: posts\n  })\n}\n\nexport const postsReducer = (state: any = {}, action: any): any => {\n  switch (action.type) {\n    case ACTIONS.GET_REMOTE_POSTS:\n      return {\n        ...state,\n        remotePosts: action.payload\n      }\n    case ACTIONS.GET_LOCAL_POSTS:\n      return {\n        ...state,\n        localPosts: action.payload\n      }\n    case ACTIONS.CREATE_POST:\n      return {\n        ...state,\n        localPosts: action.payload\n      }\n    case ACTIONS.EDIT_POST:\n      return {\n        ...state,\n        localPosts: action.payload\n      }\n    case ACTIONS.REMOVE_POST:\n      return {\n        ...state,\n        localPosts: action.payload\n      }\n    default:\n      return state\n  }\n}\n\nexport default postsReducer\n","import { createStore, applyMiddleware } from 'redux'\nimport { composeWithDevTools } from 'redux-devtools-extension'\nimport combinedReducers from './posts'\nimport thunk from 'redux-thunk'\n\nconst middleware = [thunk]\n\nexport const store = createStore(\n  combinedReducers,\n  composeWithDevTools(applyMiddleware(...middleware))\n)\n","import React from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  text: string\n  onClick: () => void\n}\n\nconst Button = ({ text, onClick }: Props): JSX.Element => (\n  <Container onClick={onClick}>{text}</Container>\n)\n\nexport default Button\n\nconst Container = styled.button`\n  border: 1px solid transparent;\n  padding: 0.8em;\n  background: #378ad3;\n  color: white;\n  border-radius: 3px;\n  :hover {\n    background: #3ca4ff;\n    cursor: pointer;\n  }\n`\n","import React, { ChangeEvent } from 'react'\nimport styled from 'styled-components'\n\ninterface TextAreaInterface {\n  onChange: (e: ChangeEvent<HTMLTextAreaElement>) => void\n  placeholder?: string\n  name: string\n  defaultValue?: string\n}\n\nconst TextArea = (props: TextAreaInterface): JSX.Element => (\n  <Container\n    onChange={props.onChange}\n    placeholder={props.placeholder}\n    name={props.name}\n    defaultValue={props.defaultValue}\n  />\n)\n\nexport default TextArea\n\nconst Container = styled.textarea`\n  color: white;\n  border: 1px solid #697075;\n  padding: 10px;\n  background: transparent;\n  border-radius: 3px;\n  max-width: 100%;\n  min-width: 100%;\n  :focus {\n    outline: none;\n    border: 1px solid #378ad3;\n  }\n`\n","import React, { ChangeEvent } from 'react'\nimport styled from 'styled-components'\n\ninterface Props {\n  onChange: (e: ChangeEvent<HTMLInputElement>) => void\n  placeholder?: string\n  name: string\n  defaultValue?: string\n}\n\nconst Input = (props: Props): JSX.Element => (\n  <Container\n    onChange={props.onChange}\n    placeholder={props.placeholder}\n    name={props.name}\n    defaultValue={props.defaultValue}\n  />\n)\n\nexport default Input\n\nconst Container = styled.input`\n  color: white;\n  border: 1px solid #697075;\n  padding: 10px;\n  background: transparent;\n  border-radius: 3px;\n  width: 100%;\n  :focus {\n    outline: none;\n    border: 1px solid #378ad3;\n  }\n`\n","/* eslint-disable @typescript-eslint/no-explicit-any */\nimport React, { useState, BaseSyntheticEvent } from 'react'\nimport { v4 as uuid } from 'uuid'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\n\n// Components\nimport Button from '../../Components/Button'\nimport TextArea from '../../Components/TextArea'\nimport Input from '../../Components/Input'\nimport { createPost } from 'Domain/redux/posts'\n\ninterface State {\n  title: string\n  text: string\n}\n\nconst PostCreator = (): JSX.Element => {\n  const dispatch = useDispatch()\n  const [state, setState] = useState<State>({ title: '', text: '' })\n\n  const updateState = (e: BaseSyntheticEvent): void => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const store = (): void => {\n    if (!state?.text || !state?.title) return alert(\"Fields can't be empty\")\n    dispatch(createPost(uuid(), state))\n  }\n\n  return (\n    <Container>\n      <Input onChange={updateState} placeholder=\"Title field...\" name=\"title\" />\n      <TextArea\n        onChange={updateState}\n        placeholder=\"Text field...\"\n        name=\"text\"\n      />\n      <Button onClick={store} text=\"Create Post\" />\n    </Container>\n  )\n}\n\nexport default PostCreator\n\nconst Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n  width: 300px;\n  margin: 20px;\n\n  textarea {\n    margin: 10px 0;\n  }\n`\n","import React, { BaseSyntheticEvent, useState, memo } from 'react'\nimport { useDispatch } from 'react-redux'\nimport styled from 'styled-components'\n\n// Components\nimport Button from '../../Components/Button'\nimport Input from '../../Components/Input'\nimport TextArea from '../../Components/TextArea'\n\n// Functions\nimport { editPost, removePost } from '../../../Domain/redux/posts'\n\ninterface State {\n  title: string\n  text: string\n}\n\nexport interface Props {\n  isRemote: boolean\n  id: string\n  value: {\n    title: string\n    text: string\n  }\n}\n\nconst Post = (props: Props): JSX.Element => {\n  const dispatch = useDispatch()\n  const [isEditable, setIsEditable] = useState<boolean>(false)\n  const [state, setState] = useState<State>({ title: '', text: '' })\n\n  const updateState = (e: BaseSyntheticEvent): void => {\n    setState({\n      ...state,\n      [e.target.name]: e.target.value\n    })\n  }\n\n  const setEditable = (): void => {\n    setIsEditable(true)\n    setState({ title: props.value.title, text: props.value.text })\n  }\n\n  const save = (): void => {\n    setIsEditable(false)\n    dispatch(editPost(props.id, state))\n  }\n\n  const remove = (): void => {\n    dispatch(removePost(props.id))\n  }\n\n  return (\n    <Container>\n      {isEditable ? (\n        <Input\n          defaultValue={props.value.title}\n          name=\"title\"\n          onChange={updateState}\n        />\n      ) : (\n        <h1>{props.value.title}</h1>\n      )}\n      {isEditable ? (\n        <TextArea\n          defaultValue={props.value.text}\n          name=\"text\"\n          onChange={updateState}\n        />\n      ) : (\n        <p>{props.value.text}</p>\n      )}\n      {!props.isRemote && (\n        <Menu>\n          <Button text=\"Edit\" onClick={setEditable} />\n          <Button text=\"Save\" onClick={save} />\n          <Button text=\"Remove\" onClick={remove} />\n        </Menu>\n      )}\n    </Container>\n  )\n}\n\nexport default memo(Post)\n\nconst Container = styled.div`\n  width: 100%;\n  margin: 40px 0;\n\n  h1,\n  p,\n  input {\n    color: #e6e9ec;\n  }\n\n  h1 {\n    padding-bottom: 20px;\n    border-bottom: 1px solid #4a4e51;\n    margin-bottom: 20px;\n  }\n\n  button {\n    background: none;\n    color: #acb2b8;\n\n    :hover {\n      color: #b9c0c7;\n      background: transparent;\n    }\n  }\n\n  input {\n    margin-bottom: 20px;\n  }\n`\nconst Menu = styled.div``\n","import React, { useCallback, useState, useEffect } from 'react'\nimport { useDispatch, useSelector } from 'react-redux'\nimport styled from 'styled-components'\n\n// Components\nimport Button from '../../Components/Button'\n\n// Containers\nimport PostCreator from '../../Containers/PostCreator'\nimport Post from '../../Containers/Post'\n\n// Functions\nimport { getLocalPosts, getRemotePosts } from '../../../Domain/redux/posts'\n\n// Interfaces\nimport { IPost } from '../../../Data/types'\n\nconst Home = (): JSX.Element => {\n  const dispatch = useDispatch()\n  const [showLocalPosts, setShowLocalPosts] = useState<boolean>(true)\n  const memoizedLocalPosts = useCallback(() => dispatch(getLocalPosts()), [\n    dispatch\n  ])\n  const memoizedRemotPosts = useCallback(() => dispatch(getRemotePosts()), [\n    dispatch\n  ])\n  const localPosts = useSelector<any, IPost[]>((state) => state.localPosts)\n  const remotePosts = useSelector<any, IPost[]>((state) => state.remotePosts)\n\n  useEffect(() => {\n    memoizedLocalPosts()\n    memoizedRemotPosts()\n  }, [memoizedLocalPosts, memoizedRemotPosts])\n\n  const handleLocal = (): void => {\n    setShowLocalPosts(true)\n  }\n\n  const handleRemote = (): void => {\n    setShowLocalPosts(false)\n  }\n\n  return (\n    <Container>\n      <PostCreator />\n      <Nav>\n        <Button text=\"Local Posts\" onClick={handleLocal} />\n        <Button text=\"Remote Posts\" onClick={handleRemote} />\n      </Nav>\n      {showLocalPosts\n        ? localPosts?.map((post: IPost) => (\n            <>\n              <Post\n                isRemote={false}\n                key={post.id}\n                id={post.id}\n                value={post.value}\n              />\n            </>\n          ))\n        : remotePosts?.map((post: IPost) => (\n            <Post\n              isRemote={true}\n              key={post.id}\n              id={post.id}\n              value={post.value}\n            />\n          ))}\n    </Container>\n  )\n}\n\nexport default Home\n\nconst Container = styled.div`\n  height: 100%;\n  display: flex;\n  flex-direction: column;\n  align-items: center;\n`\n\nconst Nav = styled.div`\n  margin-top: 50px;\n  button {\n    background: none;\n    color: #acb2b8;\n    font-size: 1.8rem;\n    font-weight: bold;\n\n    :hover,\n    :focus {\n      outline: none;\n      background: #378ad3;\n      color: #b9c0c7;\n      background: transparent;\n    }\n  }\n`\n","import { createGlobalStyle } from 'styled-components'\n\nconst GlobalStyle = createGlobalStyle`\n  *,\n  *::after,\n  *::before {\n    margin: 0;\n    padding: 0;\n    box-sizing: border-box; \n    font-family: monospace, sans-serif;\n  }\n\n  html,\n  body,\n  #root {\n    height: 100%;\n  }\n\n  html {\n    font-size: 62.5%;\n  }\n\n  body {\n    font-weight: 400;\n    line-height: 22px;\n    font-size: 1.4rem;\n    max-width: 900px;\n    margin: 0 auto;\n    color: white; \n    -webkit-font-smoothing: antialiased !important;\n    background-color: #2D2D2D;\n  }\n`\n\nexport default GlobalStyle\n","import React from 'react'\n\n// Pages\nimport Home from './Presentation/Pages/Home'\n\nimport GlobalStyle from './styles/global'\n\nconst App = (): JSX.Element => (\n  <>\n    <Home />\n    <GlobalStyle />\n  </>\n)\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport { Provider } from 'react-redux'\nimport { store } from './Domain/redux/store'\n\nimport App from './App'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}